import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.0.1#/K8sObject.pkl"
import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.0.1#/K8sResource.pkl"
import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.0.1#/api/apps/v1/Deployment.pkl"
import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.0.1#/api/core/v1/EnvVar.pkl"
import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.0.1#/api/core/v1/PodSpec.pkl"
import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.0.1#/api/core/v1/ResourceRequirements.pkl"
import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.0.1#/api/core/v1/SecurityContext.pkl"
import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.0.1#/api/core/v1/Service.pkl"
import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.0.1#/api/core/v1/ServiceAccount.pkl"
import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.0.1#/api/rbac/v1/ClusterRole.pkl"
import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.0.1#/api/rbac/v1/ClusterRoleBinding.pkl"
import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.0.1#/apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"

name = "restate-operator"
namespace = name
baseImage = "restatedev/restate-operator"
imageVersion = "0.0.1"

selectorLabels: Mapping<String, String> = new {
  ["app"] = name
}

labels: Mapping<String, String> = new {
  ["app.kubernetes.io/name"] = name
  ["app.kubernetes.io/version"] = imageVersion
  ...selectorLabels
}

metadata: ObjectMeta = new {
  name = module.name
  namespace = module.namespace
  labels = module.labels
}

podSecurityContext: PodSpec.PodSecurityContext = new {
  runAsNonRoot = true
  runAsUser = 1000
  runAsGroup = 3000
  fsGroup = 2000
  fsGroupChangePolicy = "OnRootMismatch"
  seccompProfile {
    type = "RuntimeDefault"
  }
}

securityContext: SecurityContext = new {
  capabilities {
    drop {
      "ALL"
    }
  }
  allowPrivilegeEscalation = false
  readOnlyRootFilesystem = true
}

resourceRequirements: ResourceRequirements = new {
  limits {
    ["cpu"] = "200m"
    ["memory"] = 256.mib
  }
  requests {
    ["cpu"] = "50m"
    ["memory"] = 100.mib
  }
}

logFilter = "info,kube=debug,controller=debug"

env: Listing<EnvVar> = new {
  new {
    name = "RUST_LOG"
    value = logFilter
  }
}

resources = new Mapping<String, K8sResource> {
  ["Deployment"] = new Deployment {
    metadata = module.metadata
    spec {
      replicas = 1
      selector {
        matchLabels = selectorLabels
      }
      template {
        metadata {
          labels = module.labels
        }
        spec {
          serviceAccountName = name
          securityContext = podSecurityContext
          containers {
            new {
              name = module.name
              env = module.env
              image = "\(baseImage):\(imageVersion)"
              securityContext = module.securityContext
              resources = module.resourceRequirements
              ports {
                new {
                  name = "http"
                  containerPort = 8080
                  protocol = "TCP"
                }
              }
              readinessProbe {
                httpGet {
                  path = "/health"
                  port = "http"
                }
                initialDelaySeconds = 5
                periodSeconds = 5
              }
            }
          }
        }
      }
    }
  }
  ["Service"] = new Service {
    metadata = module.metadata
    spec {
      type = "ClusterIP"
      selector = selectorLabels
      ports {
        new {
          name = "http"
          port = 8080
          targetPort = 8080
          protocol = "TCP"
        }
      }
    }
  }
  ["ServiceAccount"] = new ServiceAccount {
    metadata = module.metadata
    automountServiceAccountToken = true
  }
  ["ClusterRole"] = new ClusterRole {
    metadata = module.metadata
    rules {
      new {
        apiGroups { "restate.dev" }
        resources { "restateclusters" "restateclusters/status" "restateclusters/finalizers" }
        verbs { "get" "list" "watch" "patch" }
      }
      new {
        apiGroups { "events.k8s.io" }
        resources { "events" }
        verbs { "create" }
      }
      new { // owned objects
        apiGroups { "" "apps" "networking.k8s.io" }
        resources {
          "namespaces" "services" "serviceaccounts"
          "networkpolicies" "statefulsets" "persistentvolumeclaims"
        }
        verbs { "get" "list" "watch" "create" "patch" }
      }
      new { // we delete statefulsets as part of pvc resizing
        apiGroups { "apps" }
        resources { "statefulsets" }
        verbs { "delete" }
      }
    }
  }
  ["ClusterRoleBinding"] = new ClusterRoleBinding {
    metadata = module.metadata
    subjects {
      new {
        kind = "ServiceAccount"
        namespace = module.namespace
        name = module.name
      }
    }
    roleRef {
      kind = "ClusterRole"
      name = module.name
      apiGroup = "rbac.authorization.k8s.io"
    }
  }
}

output {
  renderer = new YamlRenderer {
    converters = (K8sObject.output.renderer as YamlRenderer).converters
    isStream = true
  }
  value = new Listing<K8sResource> {
    for (_, resource in resources) {
      resource
    }
  }
}
